{"ast":null,"code":"import mixpanel from 'mixpanel-browser';\nmixpanel.init('e61e75af1bade22083e591374f70d9cf', {\n  debug: true\n});\nlet env_check = true;\nlet actions = {\n  identify: id => {\n    if (env_check) mixpanel.identify(id);\n  },\n  alias: id => {\n    if (env_check) mixpanel.alias(id);\n  },\n  track: (name, props) => {\n    if (env_check) mixpanel.track(name, props);\n  },\n  people: {\n    set: props => {\n      if (env_check) mixpanel.people.set(props);\n    }\n  }\n};\nexport let Mixpanel = actions;","map":{"version":3,"names":["mixpanel","init","debug","env_check","actions","identify","id","alias","track","name","props","people","set","Mixpanel"],"sources":["/Users/renoyroy/Documents/Projects/Gignet/sowmini/analytics-integration/src/hooks/useMixpanel.js"],"sourcesContent":["import mixpanel from 'mixpanel-browser';\nmixpanel.init('e61e75af1bade22083e591374f70d9cf', {debug: true});\n\nlet env_check = true;\n\nlet actions = {\n  identify: (id) => {\n    if (env_check) mixpanel.identify(id);\n  },\n  alias: (id) => {\n    if (env_check) mixpanel.alias(id);\n  },\n  track: (name, props) => {\n    if (env_check) mixpanel.track(name, props);\n  },\n  people: {\n    set: (props) => {\n      if (env_check) mixpanel.people.set(props);\n    },\n  },\n};\n\nexport let Mixpanel = actions;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,kBAAkB;AACvCA,QAAQ,CAACC,IAAI,CAAC,kCAAkC,EAAE;EAACC,KAAK,EAAE;AAAI,CAAC,CAAC;AAEhE,IAAIC,SAAS,GAAG,IAAI;AAEpB,IAAIC,OAAO,GAAG;EACZC,QAAQ,EAAGC,EAAE,IAAK;IAChB,IAAIH,SAAS,EAAEH,QAAQ,CAACK,QAAQ,CAACC,EAAE,CAAC;EACtC,CAAC;EACDC,KAAK,EAAGD,EAAE,IAAK;IACb,IAAIH,SAAS,EAAEH,QAAQ,CAACO,KAAK,CAACD,EAAE,CAAC;EACnC,CAAC;EACDE,KAAK,EAAEA,CAACC,IAAI,EAAEC,KAAK,KAAK;IACtB,IAAIP,SAAS,EAAEH,QAAQ,CAACQ,KAAK,CAACC,IAAI,EAAEC,KAAK,CAAC;EAC5C,CAAC;EACDC,MAAM,EAAE;IACNC,GAAG,EAAGF,KAAK,IAAK;MACd,IAAIP,SAAS,EAAEH,QAAQ,CAACW,MAAM,CAACC,GAAG,CAACF,KAAK,CAAC;IAC3C;EACF;AACF,CAAC;AAED,OAAO,IAAIG,QAAQ,GAAGT,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}